// Shikshanam Database Schema - Optimized for Performance and Scalability

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  ADMIN
  MODERATOR
  INSTRUCTOR
  STUDENT
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  MAINTENANCE
}

enum LessonStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
  QUIZ
  ASSIGNMENT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VIEW
  DOWNLOAD
  UPLOAD
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id                String     @id @default(cuid())
  username          String     @unique
  email             String?    @unique
  passwordHash      String?
  firstName         String?
  lastName          String?
  displayName       String?
  avatar            String?
  bio               String?
  role              UserRole   @default(STUDENT)
  status            UserStatus @default(PENDING_VERIFICATION)
  isActive          Boolean    @default(true)
  emailVerified     Boolean    @default(false)
  emailVerifiedAt   DateTime?
  lastLogin         DateTime?
  lastActiveAt      DateTime?
  timezone          String     @default("UTC")
  language          String     @default("en")
  preferences       Json?      // User preferences and settings
  metadata          Json?      // Additional user metadata
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deletedAt         DateTime?  // Soft delete

  // Relations
  refreshTokens     RefreshToken[]
  auditLogs         AuditLog[]
  enrollments       Enrollment[]
  progress          Progress[]
  submissions       Submission[]
  notifications     Notification[]
  userSessions      UserSession[]

  @@map("users")
  @@index([email], map: "idx_users_email")
  @@index([username], map: "idx_users_username")
  @@index([role], map: "idx_users_role")
  @@index([status], map: "idx_users_status")
  @@index([isActive], map: "idx_users_active")
  @@index([createdAt], map: "idx_users_created_at")
  @@index([lastLogin, role], map: "idx_users_last_login_role")
  @@index([deletedAt], map: "idx_users_deleted_at")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId], map: "idx_refresh_tokens_user_id")
  @@index([expiresAt], map: "idx_refresh_tokens_expires_at")
  @@index([token], map: "idx_refresh_tokens_token")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  ipAddress String?
  userAgent String?
  deviceInfo Json?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@index([userId], map: "idx_user_sessions_user_id")
  @@index([sessionId], map: "idx_user_sessions_session_id")
  @@index([expiresAt], map: "idx_user_sessions_expires_at")
  @@index([isActive], map: "idx_user_sessions_active")
}

// ============================================================================
// CONTENT MANAGEMENT
// ============================================================================

model Course {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  description String?
  shortDescription String?
  thumbnail   String?
  banner      String?
  instructorId String?
  category    String?
  tags        String[]     @default([])
  difficulty  String       @default("BEGINNER")
  duration    Int?         // Duration in minutes
  price       Decimal?     @db.Decimal(10, 2)
  currency    String       @default("USD")
  status      CourseStatus @default(DRAFT)
  isPublished Boolean      @default(false)
  publishedAt DateTime?
  featured    Boolean      @default(false)
  metadata    Json?        // Additional course metadata
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?    // Soft delete

  // Relations
  lessons     Lesson[]
  enrollments Enrollment[]
  progress    Progress[]
  reviews     Review[]

  @@map("courses")
  @@index([slug], map: "idx_courses_slug")
  @@index([instructorId], map: "idx_courses_instructor")
  @@index([status], map: "idx_courses_status")
  @@index([isPublished], map: "idx_courses_published")
  @@index([featured], map: "idx_courses_featured")
  @@index([category], map: "idx_courses_category")
  @@index([createdAt], map: "idx_courses_created_at")
  @@index([deletedAt], map: "idx_courses_deleted_at")
}

model Lesson {
  id          String       @id @default(cuid())
  courseId    String
  title       String
  slug        String
  description String?
  content     String?      // Rich text content
  contentType ContentType  @default(TEXT)
  duration    Int?         // Duration in minutes
  order       Int          @default(0)
  status      LessonStatus @default(DRAFT)
  isPublished Boolean      @default(false)
  publishedAt DateTime?
  metadata    Json?        // Additional lesson metadata
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?    // Soft delete

  // Relations
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress    Progress[]
  submissions Submission[]

  @@map("lessons")
  @@index([courseId], map: "idx_lessons_course_id")
  @@index([slug], map: "idx_lessons_slug")
  @@index([status], map: "idx_lessons_status")
  @@index([isPublished], map: "idx_lessons_published")
  @@index([order], map: "idx_lessons_order")
  @@index([deletedAt], map: "idx_lessons_deleted_at")
  @@unique([courseId, slug], map: "unique_lesson_course_slug")
}

// ============================================================================
// LEARNING PROGRESS
// ============================================================================

model Enrollment {
  id        String           @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  enrolledAt DateTime        @default(now())
  completedAt DateTime?
  progress  Decimal          @default(0) @db.Decimal(5, 2) // Percentage 0-100
  metadata  Json?            // Additional enrollment metadata
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("enrollments")
  @@index([userId], map: "idx_enrollments_user_id")
  @@index([courseId], map: "idx_enrollments_course_id")
  @@index([status], map: "idx_enrollments_status")
  @@index([enrolledAt], map: "idx_enrollments_enrolled_at")
  @@unique([userId, courseId], map: "unique_user_course_enrollment")
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  courseId    String?
  lessonId    String?
  completed   Boolean  @default(false)
  completedAt DateTime?
  timeSpent   Int      @default(0) // Time spent in seconds
  score       Decimal? @db.Decimal(5, 2) // Score if applicable
  metadata    Json?    // Additional progress metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("progress")
  @@index([userId], map: "idx_progress_user_id")
  @@index([courseId], map: "idx_progress_course_id")
  @@index([lessonId], map: "idx_progress_lesson_id")
  @@index([completed], map: "idx_progress_completed")
  @@index([completedAt], map: "idx_progress_completed_at")
  @@unique([userId, lessonId], map: "unique_user_lesson_progress")
}

model Submission {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  content     String?  // Submission content
  attachments String[] @default([]) // File attachments
  score       Decimal? @db.Decimal(5, 2)
  feedback    String?
  status      String   @default("SUBMITTED") // SUBMITTED, GRADED, RETURNED
  submittedAt DateTime @default(now())
  gradedAt    DateTime?
  metadata    Json?    // Additional submission metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("submissions")
  @@index([userId], map: "idx_submissions_user_id")
  @@index([lessonId], map: "idx_submissions_lesson_id")
  @@index([status], map: "idx_submissions_status")
  @@index([submittedAt], map: "idx_submissions_submitted_at")
  @@index([gradedAt], map: "idx_submissions_graded_at")
}

// ============================================================================
// REVIEWS AND RATINGS
// ============================================================================

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int      // 1-5 stars
  title     String?
  content   String?
  isPublic  Boolean  @default(true)
  helpful   Int      @default(0) // Number of helpful votes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("reviews")
  @@index([userId], map: "idx_reviews_user_id")
  @@index([courseId], map: "idx_reviews_course_id")
  @@index([rating], map: "idx_reviews_rating")
  @@index([isPublic], map: "idx_reviews_public")
  @@index([createdAt], map: "idx_reviews_created_at")
  @@unique([userId, courseId], map: "unique_user_course_review")
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("INFO") // INFO, WARNING, ERROR, SUCCESS
  isRead    Boolean  @default(false)
  readAt    DateTime?
  metadata  Json?    // Additional notification metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId], map: "idx_notifications_user_id")
  @@index([isRead], map: "idx_notifications_read")
  @@index([type], map: "idx_notifications_type")
  @@index([createdAt], map: "idx_notifications_created_at")
}

// ============================================================================
// AUDIT AND ANALYTICS
// ============================================================================

model AuditLog {
  id         String     @id @default(cuid())
  userId     String?
  action     AuditAction
  resource   String     // user, course, lesson, etc.
  resourceId String?
  oldValues  Json?      // Previous values for updates
  newValues  Json?      // New values for updates
  metadata   Json?      // Additional context
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  createdAt  DateTime   @default(now())

  // Relations
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([userId], map: "idx_audit_logs_user_id")
  @@index([action], map: "idx_audit_logs_action")
  @@index([resource], map: "idx_audit_logs_resource")
  @@index([createdAt], map: "idx_audit_logs_created_at")
  @@index([userId, action], map: "idx_audit_logs_user_action")
  @@index([userId, resource, action], map: "idx_audit_logs_user_resource_action")
  @@index([createdAt, action], map: "idx_audit_logs_created_action")
  @@index([createdAt, ipAddress], map: "idx_audit_logs_created_ip")
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("STRING") // STRING, NUMBER, BOOLEAN, JSON
  category  String   @default("GENERAL")
  isPublic  Boolean  @default(false)
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
  @@index([key], map: "idx_system_config_key")
  @@index([category], map: "idx_system_config_category")
  @@index([isPublic], map: "idx_system_config_public")
}
